
; ******** Source: main.asm
     1                          ; ***************************************************************************************************************
     2                          ; ***************************************************************************************************************
     3                          ;
     4                          ;      Name:       main.asm
     5                          ;      Purpose:    MTL Runtime (slow 'n' lazy version, NMOS 6502 only no optimisation)
     6                          ;      Created:    26th December 2020
     7                          ;      Author:     Paul Robson (paul@robsons.org.uk)
     8                          ;
     9                          ; ***************************************************************************************************************
    10                          ; ***************************************************************************************************************
    11                          
    12                          
    13                          ; ***************************************************************************************************************
    14                          ;
    15                          ;					Runtime Header starts here (if not run in test handler, target #0)
    16                          ;
    17                          ; ***************************************************************************************************************
    18                          
    19                          start
    20  2100 4c4021             		jmp 	boot 						; +0  is jump to initial code
    21  2103 00                 		!byte 	0
    22                          execRoutine		
    23  2104 4c5621             		jmp 	execRuntime 				; +4  is opcode execution routine
    24  2107 00                 		!byte 	0
    25                          
    26                          firstProcedure		
    27  2108 d922               		!word	codeSpace 					; +8  is the address of the first procedure.
    28                          loadAddress		
    29  210a 0021               		!word 	start  						; +10 is the load address
    30                          initStart
    31  210c 0623               		!word 	UnnitialisedVariables 		; +12 is the start of the uninitialised variables.
    32                          initEnd
    33  210e 4623               		!word 	EndVariableSpace 			; +14 is the end of the uninitialised variables.
    34                          
    35                          		* = start+64
    36                          
    37                          ; ***************************************************************************************************************
    38                          ;
    39                          ;								Import the system specific code
    40                          ;
    41                          ; ***************************************************************************************************************
    42                          
    43                          		!if target=1 {
    44                          		!source "bootmega.asm"
    45                          		} 
    46                          		!if target=2 {

; ******** Source: boottest.asm
     1                          ; ***************************************************************************************************************
     2                          ; ***************************************************************************************************************
     3                          ;
     4                          ;      Name:       boottest.asm
     5                          ;      Purpose:    MTL Runtime, testbed code.
     6                          ;      Created:    26th December 2020
     7                          ;      Author:     Paul Robson (paul@robsons.org.uk)
     8                          ;
     9                          ; ***************************************************************************************************************
    10                          ; ***************************************************************************************************************
    11                          
    12                          zeroPageStart = $10
    13                          
    14                          variableMax = 32 								; how many variables allowed in test version
    15                          
    16                          boot
    17  2140 78                 		sei
    18  2141 4c4721             		jmp     runApplication
    19                          
    20                          ; ***************************************************************************************************************
    21                          ;
    22                          ;											Print Character in A
    23                          ;
    24                          ; ***************************************************************************************************************
    25                          
    26                          PrintCharacter
    27  2144 4ceeff             		jmp     $FFEE

; ******** Source: main.asm
    47                          
    48                          		}

; ******** Source: data.asm
     1                          ; ***************************************************************************************************************
     2                          ; ***************************************************************************************************************
     3                          ;
     4                          ;      Name:       data.asm
     5                          ;      Purpose:    MTL Runtime ZP Allocation, Macros etc.
     6                          ;      Created:    26th December 2020
     7                          ;      Author:     Paul Robson (paul@robsons.org.uk)
     8                          ;
     9                          ; ***************************************************************************************************************
    10                          ; ***************************************************************************************************************
    11                          	
    12                          
    13                          ; ***************************************************************************************************************
    14                          ;
    15                          ;										Zero Page Allocation
    16                          ;
    17                          ; ***************************************************************************************************************
    18                          
    19                          pctr = zeroPageStart						; program counter (address of instruction)
    20                          
    21                          register = zeroPageStart+2 					; current register value.
    22                          
    23                          eac = zeroPageStart+4 						; effective address calculation.
    24                          
    25                          instr = zeroPageStart+6 					; current instruction.
    26                          
    27                          temp0 = zeroPageStart+8 					; target address.
    28                          
    29                          ; ***************************************************************************************************************
    30                          ;
    31                          ;												Macros
    32                          ;
    33                          ; ***************************************************************************************************************
    34                          
    35                          !macro set16 .addr,.value {
    36                          		lda 	#((.value) & $FF)
    37                          		sta 	0+(.addr)
    38                          		lda 	#((.value) >> 8)
    39                          		sta 	1+(.addr)
    40                          }
    41                          
    42                          !macro 	inc16 .addr {
    43                          		inc 	0+(.addr)
    44                          		bne 	+
    45                          		inc 	1+(.addr)
    46                          +
    47                          }
    48                          
    49                          !macro cmd 	.cmdid,.addr {
    50                          		!byte 	(.cmdid << 4)+((.addr >> 8) & 0x0F)
    51                          		!byte 	(.addr & $FF)
    52                          }		
    53                          

; ******** Source: main.asm
    49                          
    50                          
    51                          ; ***************************************************************************************************************
    52                          ;
    53                          ;									Runtime code starts here
    54                          ;
    55                          ; ***************************************************************************************************************
    56                          
    57                          runApplication		
    58  2147 a2ff               		ldx 	#$FF 						; reset the 6502 stack.
    59  2149 9a                 		txs
    60  214a 206e22             		jsr 	ClearMemory 				; erase all memory.
    61  214d 205321             		jsr 	runFirstProc 				; run the first procedure
    62  2150 4c5021             halted:	jmp 	halted		 				; and stop.
    63                          
    64                          runFirstProc		
    65  2153 6c0821             		jmp 	(firstProcedure) 			; execute the first procedure
    66                          
    67                          ; ***************************************************************************************************************
    68                          ;
    69                          ;											Includes
    70                          ;
    71                          ; ***************************************************************************************************************
    72                          

; ******** Source: exec.asm
     1                          ; ***************************************************************************************************************
     2                          ; ***************************************************************************************************************
     3                          ;
     4                          ;      Name:       exec.asm
     5                          ;      Purpose:    Execute the runtime
     6                          ;      Created:    27th December 2020
     7                          ;      Author:     Paul Robson (paul@robsons.org.uk)
     8                          ;
     9                          ; ***************************************************************************************************************
    10                          ; ***************************************************************************************************************
    11                          
    12                          ; ***************************************************************************************************************
    13                          ;
    14                          ;									Run a code routine following the call
    15                          ;
    16                          ; ***************************************************************************************************************
    17                          
    18                          execRuntime
    19  2156 18                 		clc
    20  2157 68                 		pla 								; get the start address from the call + 1
    21  2158 6901               		adc 	#1 							; RTS post increments on return.
    22  215a 8510               		sta 	pctr
    23  215c 68                 		pla
    24  215d 6900               		adc 	#0
    25  215f 8511               		sta 	pctr+1
    26                          
    27                          execLoop
    28  2161 a000               		ldy 	#0 							; get instruction (Hi/Lo order)
    29  2163 b110               		lda 	(pctr),y
    30  2165 8517               		sta 	instr+1
    31  2167 c8                 		iny
    32  2168 b110               		lda 	(pctr),y
    33  216a 8516               		sta 	instr
    34                          		;
    35  216c 209522             		jsr 	ShowDebugInfo 				; current state if debugging
    36                          		;
    37  216f a510               		lda 	pctr 						; bump pctr
    38  2171 18                 		clc 
    39  2172 6902               		adc 	#2
    40  2174 8510               		sta 	pctr
    41  2176 9002               		bcc 	+
    42  2178 e611               		inc 	pctr+1
    43                          +
    44                          
    45                          
    46  217a a517               		lda 	instr+1 					; get instr MSN and double it, so shift right thrice.
    47  217c 4a                 		lsr
    48  217d 4a                 		lsr
    49  217e 4a                 		lsr
    50  217f 291e               		and 	#$1E 						; force into range
    51  2181 aa                 		tax
    52                          
    53  2182 bd8f21             		lda 	execTable,x 				; get address and go there.
    54  2185 8518               		sta 	temp0
    55  2187 bd9021             		lda 	execTable+1,x
    56  218a 8519               		sta 	temp0+1
    57                          
    58  218c 6c1800             		jmp 	(temp0)
    59                          
    60                          execTable
    61  218f b721               		!word 	Command_LDR  				; $0x Load Register
    62  2191 c521               		!word 	Command_STR  				; $1x Store Register
    63  2193 d321               		!word 	Command_ADD 				; $2x Add to Register
    64  2195 e621               		!word 	Command_SUB 				; $3x Sub from Register
    65  2197 af21               		!word 	notImplemented 				; $4x
    66  2199 af21               		!word 	notImplemented 				; $5x
    67  219b f921               		!word 	Command_AND 				; $6x And into Register
    68  219d 0b22               		!word 	Command_ORR 				; $7x Or with Register
    69  219f 1d22               		!word 	Command_XOR 				; $8x Xor into Register
    70  21a1 4222               		!word 	Command_BRA 				; $9x Branch always
    71  21a3 5e22               		!word 	Command_BEQ 				; $Ax Branch zero
    72  21a5 6722               		!word 	Command_BPL 				; $Bx Branch positive
    73  21a7 af21               		!word 	notImplemented 				; $Cx
    74  21a9 af21               		!word 	notImplemented 				; $Dx
    75  21ab af21               		!word 	notImplemented 				; $Ex
    76  21ad af21               		!word 	notImplemented 				; $Fx
    77                          
    78                          notImplemented								; come here when not implemented.
    79  21af a2ee               		ldx 	#$EE
    80  21b1 8a                 		txa
    81  21b2 a8                 		tay
    82  21b3 03                 		see
    83                          halt

; ******** Source: main.asm
    73  21b4 4cb421             

; ******** Source: simple.asm
     1                          ; ***************************************************************************************************************
     2                          ; ***************************************************************************************************************
     3                          ;
     4                          ;      Name:       simple.asm
     5                          ;      Purpose:    Simple Opcodes
     6                          ;      Created:    27th December 2020
     7                          ;      Author:     Paul Robson (paul@robsons.org.uk)
     8                          ;
     9                          ; ***************************************************************************************************************
    10                          ; ***************************************************************************************************************
    11                          
    12                          ; ***************************************************************************************************************
    13                          ;
    14                          ;										0x LDR - Load Register
    15                          ;
    16                          ; ***************************************************************************************************************
    17                          
    18                          Command_LDR:
    19  21b7 202f22             		jsr 	EffectiveAddress
    20  21ba b114               		lda 	(eac),y
    21  21bc 8513               		sta 	register+1
    22  21be a114               		lda 	(eac,x)
    23  21c0 8512               		sta 	register		
    24  21c2 4c6121             		jmp 	execLoop
    25                          
    26                          ; ***************************************************************************************************************
    27                          ;
    28                          ;										1x STR - Store Register
    29                          ;
    30                          ; ***************************************************************************************************************
    31                          
    32                          Command_STR:
    33  21c5 202f22             		jsr 	EffectiveAddress
    34  21c8 a513               		lda 	register+1
    35  21ca 9114               		sta 	(eac),y
    36  21cc a512               		lda 	register		
    37  21ce 8114               		sta 	(eac,x)
    38  21d0 4c6121             		jmp 	execLoop
    39                          
    40                          ; ***************************************************************************************************************
    41                          ;
    42                          ;										2x ADD - Add Register
    43                          ;
    44                          ; ***************************************************************************************************************
    45                          
    46                          Command_ADD:
    47  21d3 202f22             		jsr 	EffectiveAddress
    48  21d6 18                 		clc
    49  21d7 a512               		lda 	register		
    50  21d9 6114               		adc 	(eac,x)
    51  21db 8512               		sta 	register
    52  21dd a513               		lda 	register+1
    53  21df 7114               		adc 	(eac),y
    54  21e1 8513               		sta		register+1
    55  21e3 4c6121             		jmp 	execLoop
    56                          
    57                          ; ***************************************************************************************************************
    58                          ;
    59                          ;										3x SUB - Sub from Register
    60                          ;
    61                          ; ***************************************************************************************************************
    62                          
    63                          Command_SUB:
    64  21e6 202f22             		jsr 	EffectiveAddress
    65  21e9 38                 		sec
    66  21ea a512               		lda 	register		
    67  21ec e114               		sbc 	(eac,x)
    68  21ee 8512               		sta 	register
    69  21f0 a513               		lda 	register+1
    70  21f2 f114               		sbc 	(eac),y
    71  21f4 8513               		sta		register+1
    72  21f6 4c6121             		jmp 	execLoop
    73                          
    74                          ; ***************************************************************************************************************
    75                          ;
    76                          ;										6x AND - And Register
    77                          ;
    78                          ; ***************************************************************************************************************
    79                          
    80                          Command_AND:
    81  21f9 202f22             		jsr 	EffectiveAddress
    82  21fc a512               		lda 	register		
    83  21fe 2114               		and 	(eac,x)
    84  2200 8512               		sta 	register
    85  2202 a513               		lda 	register+1
    86  2204 3114               		and 	(eac),y
    87  2206 8513               		sta		register+1
    88  2208 4c6121             		jmp 	execLoop
    89                          
    90                          ; ***************************************************************************************************************
    91                          ;
    92                          ;										7x ORR - Or Register
    93                          ;
    94                          ; ***************************************************************************************************************
    95                          
    96                          Command_ORR:
    97  220b 202f22             		jsr 	EffectiveAddress
    98  220e a512               		lda 	register		
    99  2210 0114               		ora 	(eac,x)
   100  2212 8512               		sta 	register
   101  2214 a513               		lda 	register+1
   102  2216 1114               		ora 	(eac),y
   103  2218 8513               		sta		register+1
   104  221a 4c6121             		jmp 	execLoop
   105                          
   106                          ; ***************************************************************************************************************
   107                          ;
   108                          ;										8x XOR - ExOr Register
   109                          ;
   110                          ; ***************************************************************************************************************
   111                          
   112                          Command_XOR:
   113  221d 202f22             		jsr 	EffectiveAddress
   114  2220 a512               		lda 	register		
   115  2222 4114               		eor 	(eac,x)
   116  2224 8512               		sta 	register
   117  2226 a513               		lda 	register+1
   118  2228 5114               		eor 	(eac),y
   119  222a 8513               		sta		register+1
   120  222c 4c6121             		jmp 	execLoop
   121                          
   122                          ; ***************************************************************************************************************
   123                          ;
   124                          ;						Effective address calc on instruction, set X = 0 Y = 1
   125                          ;
   126                          ; ***************************************************************************************************************
   127                          
   128                          EffectiveAddress:
   129  222f a516               		lda 	instr
   130  2231 0a                 		asl 	
   131  2232 8514               		sta 	eac
   132  2234 a517               		lda 	instr+1
   133  2236 290f               		and 	#$0F
   134  2238 2a                 		rol 	
   135  2239 6923               		adc 	#SystemVariables >> 8
   136  223b 8515               		sta 	eac+1
   137  223d a001               		ldy 	#1
   138  223f a200               		ldx 	#0

; ******** Source: main.asm
    74  2241 60                 

; ******** Source: branch.asm
     1                          ; ***************************************************************************************************************
     2                          ; ***************************************************************************************************************
     3                          ;
     4                          ;      Name:       branch.asm
     5                          ;      Purpose:    Branch commands
     6                          ;      Created:    27th December 2020
     7                          ;      Author:     Paul Robson (paul@robsons.org.uk)
     8                          ;
     9                          ; ***************************************************************************************************************
    10                          ; ***************************************************************************************************************
    11                          
    12                          ; ***************************************************************************************************************
    13                          ;
    14                          ;										9x BRA Branch Always
    15                          ;
    16                          ; ***************************************************************************************************************
    17                          
    18                          Command_BRA:
    19  2242 a517               		lda 	instr+1 					; needs sign extend.
    20  2244 2908               		and 	#$08 						; if bit 11 is set.
    21  2246 f006               		beq 	+
    22  2248 a517               		lda 	instr+1
    23  224a 09f0               		ora 	#$F0
    24  224c 8517               		sta 	instr+1
    25                          +		
    26  224e 18                 		clc 								; now add to the pctr
    27  224f a516               		lda 	instr
    28  2251 6510               		adc 	pctr
    29  2253 8510               		sta 	pctr
    30  2255 a517               		lda 	instr+1
    31  2257 6511               		adc 	pctr+1
    32  2259 8511               		sta 	pctr+1
    33                          
    34  225b 4c6121             		jmp 	execLoop
    35                          
    36                          ; ***************************************************************************************************************
    37                          ;
    38                          ;										Ax BEQ Branch equal zero
    39                          ;
    40                          ; ***************************************************************************************************************
    41                          
    42                          Command_BEQ:
    43  225e a512               		lda 	register
    44  2260 0513               		ora 	register+1
    45  2262 f0de               		beq 	Command_BRA
    46  2264 4c6121             		jmp 	execLoop
    47                          
    48                          ; ***************************************************************************************************************
    49                          ;
    50                          ;										Bx BPL Branch positive
    51                          ;
    52                          ; ***************************************************************************************************************
    53                          
    54                          Command_BPL:
    55  2267 a513               		lda 	register+1
    56  2269 10d7               		bpl 	Command_BRA
    57  226b 4c6121             		jmp 	execLoop

; ******** Source: main.asm
    75                          

; ******** Source: utility.asm
     1                          ; ***************************************************************************************************************
     2                          ; ***************************************************************************************************************
     3                          ;
     4                          ;      Name:       utility.asm
     5                          ;      Purpose:    Utility routines
     6                          ;      Created:    27th December 2020
     7                          ;      Author:     Paul Robson (paul@robsons.org.uk)
     8                          ;
     9                          ; ***************************************************************************************************************
    10                          ; ***************************************************************************************************************
    11                          
    12                          ; ***************************************************************************************************************
    13                          ;
    14                          ;											Erase data memory
    15                          ;
    16                          ; ***************************************************************************************************************
    17                          
    18                          ClearMemory:
    19  226e ad0c21             		lda 	initStart 					; start erasing from here
    20  2271 8518               		sta 	temp0
    21  2273 ad0d21             		lda 	initStart+1
    22  2276 8519               		sta 	temp0+1
    23  2278 a000               		ldy 	#0		
    24                          _CLMLoop:
    25  227a a518               		lda 	temp0 						; done the lot ?
    26  227c cd0e21             		cmp 	initEnd
    27  227f d008               		bne 	_CLMClear
    28  2281 a519               		lda 	temp0+1
    29  2283 cd0f21             		cmp 	initEnd+1
    30  2286 d001               		bne 	_CLMClear
    31  2288 60                 		rts		
    32                          _CLMClear:
    33  2289 98                 		tya 								; zero location and advance.
    34  228a 9118               		sta 	(temp0),y
    35  228c e618               		inc 	temp0
    36  228e d0ea               		bne 	_CLMLoop
    37  2290 e619               		inc 	temp0+1
    38  2292 4c7a22             		jmp 	_CLMLoop
    39                          
    40                          ; ***************************************************************************************************************
    41                          ;
    42                          ;										Show debug information
    43                          ;
    44                          ; ***************************************************************************************************************
    45                          
    46                          ShowDebugInfo:
    47  2295 a511               		lda 	pctr+1
    48  2297 20c022             		jsr 	PrintHex
    49  229a a510               		lda 	pctr
    50  229c 20c022             		jsr 	PrintHex
    51  229f a517               		lda 	instr+1
    52  22a1 20b922             		jsr 	PrintHexSpace
    53  22a4 a516               		lda 	instr
    54  22a6 20c022             		jsr 	PrintHex
    55  22a9 a513               		lda 	register+1
    56  22ab 20b922             		jsr 	PrintHexSpace
    57  22ae a512               		lda 	register
    58  22b0 20c022             		jsr 	PrintHex
    59  22b3 a93a               		lda 	#58
    60  22b5 204421             		jsr 	PrintCharacter
    61  22b8 60                 		rts		
    62                          
    63                          ; ***************************************************************************************************************
    64                          ;
    65                          ;						PrintA as hex constant with/without leading space
    66                          ;
    67                          ; ***************************************************************************************************************
    68                          
    69                          PrintHexSpace:
    70  22b9 48                 		pha
    71  22ba a920               		lda 	#' '
    72  22bc 204421             		jsr 	PrintCharacter
    73  22bf 68                 		pla
    74                          PrintHex:        
    75  22c0 48                 		pha
    76  22c1 4a                 		lsr     
    77  22c2 4a                 		lsr     
    78  22c3 4a                 		lsr     
    79  22c4 4a                 		lsr     
    80  22c5 20c922             		jsr     _PrintNibble
    81  22c8 68                 		pla
    82                          _PrintNibble:
    83  22c9 48                 		pha
    84  22ca 290f               		and     #15
    85  22cc c90a               		cmp     #10
    86  22ce 9002               		bcc     +
    87  22d0 6906               		adc     #6
    88                          +
    89  22d2 6930               		adc     #48
    90  22d4 204421             		jsr     PrintCharacter
    91  22d7 68                 		pla 
    92  22d8 60                 		rts

; ******** Source: main.asm
    76                          
    77                          
    78                          ; ***************************************************************************************************************
    79                          ;
    80                          ;						Testing code goes here (this is for non runtime builds)
    81                          ;
    82                          ; ***************************************************************************************************************
    83                          
    84                          codeSpace:
    85  22d9 205621             		jsr 	execRuntime
    86  22dc 0001               		+cmd 	0,1
    87  22de 3000               		+cmd 	3,0
    88  22e0 bffc               		+cmd 	11,-4
    89  22e2 ffff               		!word 	$FFFF
    90                          
    91                          ; ***************************************************************************************************************
    92                          ;
    93                          ;					Then the variables with predefined values, constants, addresses etc.
    94                          ;
    95                          ; ***************************************************************************************************************
    96                          
    97  22e4 eaeaeaeaeaeaeaea...		!align 	255,0 						; put on page boundary.
    98                          SystemVariables:
    99  2300 0100               		!word 	$0001
   100  2302 2a00               		!word 	$002A
   101  2304 0000               		!word 	$0000
   102                          
   103                          ; ***************************************************************************************************************
   104                          ;
   105                          ;									Then the uninitialised variables
   106                          ;
   107                          ; ***************************************************************************************************************
   108                          
   109                          UnnitialisedVariables:
   110                          		!if target > 0 { 					; allocate memory if not runtime build.
   111  2306 ffffffffffffffff...			!fill 	variableMax * 2,$FF
   112                          		}
   113                          EndVariableSpace:
