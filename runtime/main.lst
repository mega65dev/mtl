
; ******** Source: main.asm
     1                          ; ***************************************************************************************************************
     2                          ; ***************************************************************************************************************
     3                          ;
     4                          ;      Name:       main.asm
     5                          ;      Purpose:    MTL Runtime
     6                          ;      Created:    26th December 2020
     7                          ;      Author:     Paul Robson (paul@robsons.org.uk)
     8                          ;
     9                          ; ***************************************************************************************************************
    10                          ; ***************************************************************************************************************
    11                          
    12                          	!if target=1 {
    13                          	!source "bootmega.asm"
    14                          	} 
    15                          	!if target=2 {

; ******** Source: boottest.asm
     1                          ; ***************************************************************************************************************
     2                          ; ***************************************************************************************************************
     3                          ;
     4                          ;      Name:       boottest.asm
     5                          ;      Purpose:    MTL Runtime, testbed code.
     6                          ;      Created:    26th December 2020
     7                          ;      Author:     Paul Robson (paul@robsons.org.uk)
     8                          ;
     9                          ; ***************************************************************************************************************
    10                          ; ***************************************************************************************************************
    11                          
    12                          zeroPageStart = $10
    13                          
    14                          variableMax = 32 								; how many variables allowed in test version
    15                          
    16                          		*=$2020
    17  2020 03                 		!byte   $03
    18  2021 78                 		sei
    19  2022 4c2820             		jmp     start
    20                          
    21                          ; ***************************************************************************************************************
    22                          ;
    23                          ;											Print Character in A
    24                          ;
    25                          ; ***************************************************************************************************************
    26                          
    27                          PrintCharacter
    28  2025 4ceeff             		jmp     $FFEE
    29                          

; ******** Source: main.asm
    17                          	}
    18                          

; ******** Source: data.asm
     1                          ; ***************************************************************************************************************
     2                          ; ***************************************************************************************************************
     3                          ;
     4                          ;      Name:       data.asm
     5                          ;      Purpose:    MTL Runtime ZP Allocation, Macros etc.
     6                          ;      Created:    26th December 2020
     7                          ;      Author:     Paul Robson (paul@robsons.org.uk)
     8                          ;
     9                          ; ***************************************************************************************************************
    10                          ; ***************************************************************************************************************
    11                          	
    12                          
    13                          ; ***************************************************************************************************************
    14                          ;
    15                          ;										Zero Page Allocation
    16                          ;
    17                          ; ***************************************************************************************************************
    18                          
    19                          pctr = zeroPageStart						; program counter (address of instruction)
    20                          register = zeroPageStart+2 					; current register value.
    21                          eac = zeroPageStart+4 						; effective address calculation.
    22                          instr = zeroPageStart+6 					; current instruction.
    23                          
    24                          ; ***************************************************************************************************************
    25                          ;
    26                          ;												Macros
    27                          ;
    28                          ; ***************************************************************************************************************
    29                          
    30                          !macro set16 .addr,.value {
    31                          		lda 	#((.value) & $FF)
    32                          		sta 	0+(.addr)
    33                          		lda 	#((.value) >> 8)
    34                          		sta 	1+(.addr)
    35                          }
    36                          
    37                          !macro 	inc16 .addr {
    38                          		inc 	0+(.addr)
    39                          		bne 	+
    40                          		inc 	1+(.addr)
    41                          +
    42                          }
    43                          

; ******** Source: main.asm
    20                          
    21                          ; ***************************************************************************************************************
    22                          ;
    23                          ;					Runtime Header starts here (if not run in test handler, target #0)
    24                          ;
    25                          ; ***************************************************************************************************************
    26                          
    27                          start
    28  2028 4c6820             		jmp 	runApplication 				; +0  is jump to initial code
    29  202b 00                 		!byte 	0
    30  202c 4c0000             		jmp 	$0000 						; +4  is opcode execution routine
    31  202f 00                 		!byte 	0
    32  2030 0000               		!word	$0000 						; +8  is the address of the first procedure.
    33  2032 2820               		!word 	start  						; +10 is the load address
    34  2034 0021               		!word 	UnnitialisedVariables 		; +12 is the start of the uninitialised variables.
    35  2036 4021               		!word 	EndVariableSpace 			; +14 is the end of the uninitialised variables.
    36                          
    37                          ; ***************************************************************************************************************
    38                          ;
    39                          ;									Runtime code starts here
    40                          ;
    41                          ; ***************************************************************************************************************
    42                          
    43                          		* = start+64
    44                          
    45                          runApplication		
    46  2068 a2ff               		ldx 	#$FF
    47  206a 9a                 		txs
    48  206b a9128510a9048511   		+set16 	pctr,1042
    49  2073 e610d002e611       		+inc16  pctr
    50  2079 a200               		ldx     #0
    51  207b a92a               		lda     #42
    52  207d 8dc2ff             		sta     $FFC2 
    53  2080 bd2020             loop    lda     $2020,x
    54  2083 208e20             		jsr     PrintHexSpace
    55  2086 e8                 		inx
    56  2087 e020               		cpx     #32
    57  2089 d0f5               		bne     loop        
    58                          halt
    59  208b 4c8b20             		jmp     halt
    60                          
    61                          ; ***************************************************************************************************************
    62                          ;
    63                          ;						PrintA as hex constant with/without leading space
    64                          ;
    65                          ; ***************************************************************************************************************
    66                          
    67                          PrintHexSpace:
    68  208e 48                 		pha
    69  208f a920               		lda 	#' '
    70  2091 202520             		jsr 	PrintCharacter
    71  2094 68                 		pla
    72                          PrintHex:        
    73  2095 48                 		pha
    74  2096 4a                 		lsr     
    75  2097 4a                 		lsr     
    76  2098 4a                 		lsr     
    77  2099 4a                 		lsr     
    78  209a 209e20             		jsr     _PrintNibble
    79  209d 68                 		pla
    80                          _PrintNibble:
    81  209e 48                 		pha
    82  209f 290f               		and     #15
    83  20a1 c90a               		cmp     #10
    84  20a3 9002               		bcc     +
    85  20a5 6906               		adc     #6
    86                          +
    87  20a7 6930               		adc     #48
    88  20a9 202520             		jsr     PrintCharacter
    89  20ac 68                 		pla 
    90  20ad 60                 		rts
    91                          
    92                          ; ***************************************************************************************************************
    93                          ;
    94                          ;						Testing code goes here (this is for non runtime builds)
    95                          ;
    96                          ; ***************************************************************************************************************
    97                          
    98                          CodeSpace:
    99                          
   100                          ; ***************************************************************************************************************
   101                          ;
   102                          ;					Then the variables with predefined values, constants, addresses etc.
   103                          ;
   104                          ; ***************************************************************************************************************
   105                          
   106  20ae eaeaeaeaeaeaeaea...		!align 	255,0 						; put on page boundary.
   107                          SystemVariables:
   108                          
   109                          ; ***************************************************************************************************************
   110                          ;
   111                          ;									Then the uninitialised variables
   112                          ;
   113                          ; ***************************************************************************************************************
   114                          
   115                          UnnitialisedVariables:
   116                          		!if target > 0 { 					; allocate memory if not runtime build.
   117  2100 ffffffffffffffff...			!fill 	variableMax * 2,$FF
   118                          		}
   119                          
   120                          EndVariableSpace:
