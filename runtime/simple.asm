; ***************************************************************************************************************
; ***************************************************************************************************************
;
;      Name:       simple.asm
;      Purpose:    Simple Opcodes
;      Created:    27th December 2020
;      Author:     Paul Robson (paul@robsons.org.uk)
;
; ***************************************************************************************************************
; ***************************************************************************************************************

; ***************************************************************************************************************
;
;										0x LDR - Load Register
;
; ***************************************************************************************************************

Command_LDR:
		jsr 	EffectiveAddress
		lda 	(eac),y
		sta 	register+1
		lda 	(eac,x)
		sta 	register		
		jmp 	execLoop

; ***************************************************************************************************************
;
;										1x STR - Store Register
;
; ***************************************************************************************************************

Command_STR:
		jsr 	EffectiveAddress
		lda 	register+1
		sta 	(eac),y
		lda 	register		
		sta 	(eac,x)
		jmp 	execLoop

; ***************************************************************************************************************
;
;										2x ADD - Add Register
;
; ***************************************************************************************************************

Command_ADD:
		jsr 	EffectiveAddress
		clc
		lda 	register		
		adc 	(eac,x)
		sta 	register
		lda 	register+1
		adc 	(eac),y
		sta		register+1
		jmp 	execLoop

; ***************************************************************************************************************
;
;										3x SUB - Sub from Register
;
; ***************************************************************************************************************

Command_SUB:
		jsr 	EffectiveAddress
		sec
		lda 	register		
		sbc 	(eac,x)
		sta 	register
		lda 	register+1
		sbc 	(eac),y
		sta		register+1
		jmp 	execLoop

; ***************************************************************************************************************
;
;										6x AND - And Register
;
; ***************************************************************************************************************

Command_AND:
		jsr 	EffectiveAddress
		lda 	register		
		and 	(eac,x)
		sta 	register
		lda 	register+1
		and 	(eac),y
		sta		register+1
		jmp 	execLoop

; ***************************************************************************************************************
;
;										7x ORR - Or Register
;
; ***************************************************************************************************************

Command_ORR:
		jsr 	EffectiveAddress
		lda 	register		
		ora 	(eac,x)
		sta 	register
		lda 	register+1
		ora 	(eac),y
		sta		register+1
		jmp 	execLoop

; ***************************************************************************************************************
;
;										8x XOR - ExOr Register
;
; ***************************************************************************************************************

Command_XOR:
		jsr 	EffectiveAddress
		lda 	register		
		eor 	(eac,x)
		sta 	register
		lda 	register+1
		eor 	(eac),y
		sta		register+1
		jmp 	execLoop

; ***************************************************************************************************************
;
;						Effective address calc on instruction, set X = 0 Y = 1
;
; ***************************************************************************************************************

EffectiveAddress:
		lda 	instr
		asl 	
		sta 	eac
		lda 	instr+1
		and 	#$0F
		rol 	
		adc 	#SystemVariables >> 8
		sta 	eac+1
		ldy 	#1
		ldx 	#0
		rts